<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook"
         id="picketlink-idm-permissions">
  <title>Identity Management - Permissions API and Permission Management</title>
  
    <section>
      <title>Overview</title>
      
      <para>
        The Permissions API is a set of extensible authorization features that provide capabilities for determining access privileges 
        to application resources.  This chapter describes the <code>PermissionResolver</code> SPI and explains how to create a 
        <code>PermissionVoter</code> implementation that provides custom authorization logic.  It also looks at the ACL (Access Control List)
        features provided by the <code>PersistentPermissionVoter</code> and the management of persistent resource permissions via the 
        <code>PermissionManager</code>.
      </para>
      
      <para>
        The <code>Permission</code> interface is used in a number of places throughout the Permissions API:
      </para>

      <programlisting language="JAVA"><![CDATA[public interface Permission {

    Object getResource();

    Class<?> getResourceClass();

    Serializable getResourceIdentifier();

    IdentityType getAssignee();

    String getOperation();
}]]></programlisting>

      <para>
        Each permission instance represents a specific resource permission, and contains three important pieces of state:
      </para>
      
      <itemizedlist>
        <listitem>
          <para>
            The <emphasis>assignee</emphasis>, which is the identity to which the permission is assigned.
          </para>
        </listitem>
        <listitem>
          <para>
            The <emphasis>operation</emphasis>, which is a string value that represents the exact action that the 
            assigned identity is allowed to perform.        
          </para>
        </listitem>
        <listitem>
          <para>
            Either a <emphasis>resource</emphasis> (if known), or a combination of a <emphasis>resource class</emphasis> and
            <emphasis>resource identifier</emphasis>.  This value represents the resource to which the permission applies.
          </para>
        </listitem>
      </itemizedlist>

    </section>
    
    <section>
      <title>Checking permissions for the current user</title>
      
      <para>
        The primary method for accessing the Permissions API is via the <code>Identity</code> bean, which provides the following two methods 
        for checking permissions for the currently authenticated user:
      </para>
      
      <programlisting language="JAVA"><![CDATA[boolean hasPermission(Object resource, String operation);
boolean hasPermission(Class<?> resourceClass, Serializable identifier, String operation);]]></programlisting>

      <para>
        The first overloaded method may be used when you have a reference to the actual resource for which you wish to 
        check privileges:
      </para>
      
      <programlisting language="JAVA"><![CDATA[@Inject Identity identity;

public void deleteAccount(Account account) {
    if (identity.hasPermission(account, "DELETE")) {
        // Logic to delete Account object goes here
    } else {
        throw new SecurityException("Insufficient privileges!");
    }
}]]></programlisting>

      <para>
        The second overloaded method may be used when you <emphasis>don't</emphasis> have a reference to the resource object, but you have it's
        <emphasis>identifier</emphasis> value (for example the primary key value of an entity bean):
      </para>

      <programlisting language="JAVA"><![CDATA[@Inject Identity identity;

public void deleteCustomer(Long customerId) {
    if (identity.hasPermission(Customer.class, customerId, "DELETE")) {
        // Logic to delete Customer object goes here
    } else {
        throw new SecurityException("Insufficient privileges!");
    }
}]]></programlisting>

      <para>
        This second method is generally used for performance reasons, for example when you don't necessarily wish to load a resource object
        because of a possibly expensive instantiation cost.
      </para>
    
    </section>
    
    <section>
      <title>Using and Managing ACLs</title>
      
      <para>
        An ACL (Access Control List) can be used to control which identities may invoke specific operations on application resources.
        Underneath the covers, ACL security checks are handled by the <code>PersistentPermissionResolver</code>, which reads the
        ACL entries for each resource via the <code>PermissionStore</code>, which is typically a wrapper around some form of persistent
        storage such as database table.
      </para>
      
      <para>
        ACL permissions may be managed via a <code>PermissionManager</code>.  An instance of this bean may be obtained by first injecting the 
        <code>PartitionManager</code>, then getting an instance to the <code>PermissionManager</code> via the <code>createPermissionManager()</code>
        method:
      </para>
      
      <programlisting language="JAVA"><![CDATA[@Inject PartitionManager partitionManager;
      
public void managePermissions() {
    PermissionManager permissionManager = partitionManager.createPermissionManager();
}]]></programlisting>

      <para>
        Once you have a reference to the <code>PermissionManager</code>, you may use it to grant permissions:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public void allowRead(User user, Customer customer) {
    permissionManager.grantPermission(user, customer, "READ");
}]]></programlisting>

      <para>
        The <code>grantPermission()</code> method accepts three parameters:
      </para>
      
      <programlisting language="JAVA"><![CDATA[void grantPermission(IdentityType assignee, Object resource, String operation);]]></programlisting>
      
      <para>
        The <emphasis>assignee</emphasis> is the identity to which you wish to grant the permission.  The <emphasis>resource</emphasis> is the
        application resource for which the permission applies.  The <emphasis>operation</emphasis> is a String value representing the action that
        the assignee may invoke in relation to the resource.
      </para>

      <para>      
        Resources may conceivably be any type of <code>Object</code> so long as there exists a unique, serializable value that may be determined
        or in some way calculated from the resource object, which uniquely identifies that resource from other resources of the same type.  This
        unique value is called the <emphasis>identifier</emphasis>, an example of which might be the primary key value of an entity bean.  The
        <code>PermissionHandler</code> SPI (see section below) is responsible for generating identifier values for resource objects.
      </para>
      
      <para>
        The <code>revokePermission()</code> method may be used to remove a permission.  Like <code>grantPermission()</code>, it also accepts three
        parameters:
      </para>
      
      <programlisting language="JAVA"><![CDATA[void revokePermission(IdentityType assignee, Object resource, String operation);]]></programlisting>
      
      <para>
        It is also possible to revoke all assigned permissions for a single resource via the <code>clearPermissions()</code> method.  This is useful
        for example if you wish to delete the resource and don't wish to leave orphaned permissions:
      </para>
      
      <programlisting language="JAVA"><![CDATA[void clearPermissions(Object resource);]]></programlisting>
      
      <para>
        There are also a number of overloaded methods available for querying permissions.  These methods take an assortment of parameters depending
        on exactly which permissions you wish to find:
      </para>
      
      <programlisting language="JAVA"><![CDATA[List<Permission> listPermissions(Object resource);

List<Permission> listPermissions(Class<?> resourceClass, Serializable identifier);

List<Permission> listPermissions(Object resource, String operation);

List<Permission> listPermissions(Class<?> resourceClass, Serializable identifier, 
                                 String operation);]]></programlisting>

      <para>
        Here's some examples:
      </para>
      
      <programlisting language="JAVA"><![CDATA[// List all permissions for a known Product
Product p = lookupProduct("grapes");
List<Permission> permissions = permissionManager.listPermissions(p);

// List all permissions for a Product where we know the resource class 
// and the identifier
List<Permission> permissions = permissionManager.listPermissions(
    Product.class, "bananas");

// List all "DELETE" permissions that have been granted for a Product
Product p = lookupProduct("apples");
List<Permissions> permissions = permissionManager.listPermissions(p, "DELETE");

// List all "UPDATE" permissions for a Product where we know the 
// resource class and the identifier
List<Permissions> permissions = permissionManager.listPermissions(
    Product.class, "oranges", "UPDATE");]]></programlisting>
     
    </section>    
    <section>
      <title><code>PermissionHandler</code> SPI</title>
      
      <para>
      
      </para>
    <section>
      <title><code>PermissionResolver</code> SPI</title>
      <para>
      
      </para>
    </section>
    
</chapter>
